qemu-img create -b .node_base.qcow2  -f qcow2    zhj.img  30G
cp /var/lib/libvirt/images/.node_base.xml /etc/libvirt/qemu/${1}.xml
>>>>
		#!/bin/bash
		qemu-img create -b /var/lib/libvirt/images/.node_base.qcow2 -f qcow2 ${1}.img 20G
		cp /var/lib/libvirt/images/.node_base.xml /etc/libvirt/qemu/${1}.xml
		sed -i "2s/node_base/$1/" /etc/libvirt/qemu/${1}.xml
		sed -i "26s/node_base/$1/" /etc/libvirt/qemu/${1}.xml
			或sed "s,node_base,${1}," node.xml > ${1}.xml
		virsh define /etc/libvirt/qemu/${1}.xml
		virsh start ${1} && echo "启动成功"
>>>>



<domain type='kvm'>
  <name>web1</name>
  <uuid>aa25f070-d323-4946-8c15-af9c6f34b608</uuid>
  <memory unit='KiB'>1488282</memory>    ##最大使用内存
  <currentMemory unit='KiB'>1488282</currentMemory>  ##使用内存  ,一般上下相等
  <vcpu placement='static'>2</vcpu>   ##CPU个数
  <os>
    <type arch='x86_64' machine='pc-i440fx-rhel7.0.0'>hvm</type>
    <boot dev='hd'/>   ##从硬盘引导
    <bootmenu enable='yes'/>
    <bios useserial='yes'/>
  </os>
  <features>   ##电源属性
    <acpi/>
    <apic/>
  </features>
  <cpu mode='host-passthrough' check='none'/>
  <clock offset='localtime'/>  ##时钟属性
  <on_poweroff>destroy</on_poweroff> ##不同按钮执行什么行为
  <on_reboot>restart</on_reboot>  ##不同按钮执行什么行为
  <on_crash>restart</on_crash>  ##不同按钮执行什么行为
  <devices> ##定义硬件设备
    <emulator>/usr/libexec/qemu-kvm</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>  ##文件类型
      <source file='/var/lib/libvirt/images/web1.img'/>
      <target dev='vda' bus='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
    </disk>
    <controller type='usb' index='0' model='piix3-uhci'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x2'/>
    </controller>
    <controller type='pci' index='0' model='pci-root'/>
    <controller type='virtio-serial' index='0'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x04' function='0x0'/>
    </controller>
    <interface type='bridge'>
      <mac address='52:54:00:d2:a0:5e'/>
      <source bridge='vbr'/>  ##网卡连接交换机
      <model type='virtio'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x03' function='0x0'/>
    </interface>
    <serial type='pty'>
      <target type='isa-serial' port='0'>
        <model name='isa-serial'/>
      </target>
    </serial>
    <console type='pty'>
      <target type='serial' port='0'/>
    </console>
    <channel type='unix'>
      <target type='virtio' name='org.qemu.guest_agent.0'/>
      <address type='virtio-serial' controller='0' bus='0' port='1'/>
    </channel>
    <input type='mouse' bus='ps2'/>
    <input type='keyboard' bus='ps2'/>
    <memballoon model='virtio'>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x06' function='0x0'/>
    </memballoon>
  </devices>
</domain>
~       

------------------------------------------
>>>磁盘扩容
>>>
		1.查找要扩容的硬盘地址
		virsh domblklist  aaa
			/var/lib/libvirt/images/zhj.img
		2.扩容硬盘
		virsh blockresize --path  /var/lib/libvirt/images/zhj.img --size 35G zhj
		3.分区扩容
		echo $LANG
		LANG=C
		lsblk
		growpart /dev/vda 1
		4.文件系统扩容
		df -h
		xfs_growfs /
		df -h
>>>
>>>##Openstack
>>>
>>>###Horizon
	
>>>
>>>
>>>
		
>>>
>>>
名称 标签
文件名 路径
>>>
>>>
>>>
>>>
>>>
>>>
>>>
yum search ssh
yum -y install openssh-server
rpm -ql openssh-server.x86_64
cat /usr/lib/systemd/system/sshd.service
sshd-keygen
yum provides /usr/sbin/sshd-keygen
yum -y install initscripts-9.49.41-1.el7.x86_64
/usr/sbin/sshd -D
>>>
>>>Dockerfile
>>>
>>>ssh
FROM myos:latest
RUN yum -y install openssh-server initscripts
RUN echo 123456 | passwd --stdin root
RUN sshd-keygen
CMD ["/usr/sbin/sshd","-D"]
>>>
FROM myos
#MAINTAINER chick chick@163.com
RUN yum -y install httpd
WORKDIR cd /var/www/html 
ADD index.html index.html
ENV LANG=C
ENV PS1="[web@\h \W]#"
EXPOSE 80
EXPOSE 443
CMD ["/usr/sbin/httpd", " -DFOREGROUND"]
>>>

>>>私有镜像仓库
		docker-distribution
		启动进程
	docker1
		docker tag myos:latest 192.168.1.33:5000/myos:latest
		docker push 192.168.1.33:5000/myos:latest
		docker images
  docker2 
  docker run -it 192.168.1.33:5000/myos:latest
		##查看仓库和标签
		curl http://192.168.1.33:5000/v2/_catalog
		curl http://192.168.1.33:5000/v2/myos/tags/list

>>>
>>>
>>>
>>>
>>>
>>>
>>>
		ansible-2.4.2.0-2.el7.noarch.rpm
		python2-jmespath-0.9.0-3.el7.noarch.rpm
		python-httplib2-0.9.2-1.el7.noarch.rpm
		python-paramiko-2.1.1-4.el7.noarch.rpm
		python-passlib-1.6.5-2.el7.noarch.rpm
		sshpass-1.06-2.el7.x86_64.rpm
		默认配置文件路径/etc/ansible/ansible.cfg ##14为主机组
								#host_key_checking = False ##61取消注释,ssh连接时不需要输入yes

		/etc/ansible/hosts #末尾添加主机组
		[web]
		web1
		web2
		[db]
		db1
		db2
		[other]
		cache
>>>秘钥设置		
		ssh-keygen -t rsa -b 2048 -N '' -f key
		ssh -i key web1
		/etc/ansible/hosts
[web]
web[1:2]
[db]
db1
db2
[other]
cache ansible_ssh_port=222

[app:children]
web
db

[all:vars]
ansible_ssh_private_key_file=/root/.ssh/key
		ansible all -m ping
>>>
/etc/ 复制文件
/etc 复制文件夹

修改,相当于删除行,在添加
ansible db -m lineinfile -a 'path="/etc/my.cnf" regexp="^logbin" line="binlog-format=row" '
替换操作
ansible db -m replace -a 'path="/etc/my.cnf" regexp="row$" replace="mixed"'











wget https://nodejs.org/dist/v12.13.0/node-v12.13.0-linux-x64.tar.xz
tar -xf node-v12.13.0-linux-x64.tar.xz
cd node-v12.13.0-linux-x64
ln -s /root/node-v12.13.0-linux-x64/bin/node /usr/local/bin/node
ln -s /root/node-v12.13.0-linux-x64/bin/npm /usr/local/bin/npm
node -v 
npm -v 
ln -s /root/node-v12.13.0-linux-x64/lib/node_modules/hexo-cli/bin/hexo /usr/local/bin/hexo
hexo -v
mkdir hexo
#安装hexo
npm install -g hexo-cli
#创建文件夹
hexo init hexo/
#安装其他依赖
npm install
#生成静态文件
hexo generate
#默认4000端口
hexo server
#更换端口
hexo server -p 4001





































     
