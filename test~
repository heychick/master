应用层:客户端发起请求
表示层:将数据转换格式
会话层:建立连接
传输层:给数据分段,加上标记,使用的tcp upd 及端口
网络层:给数据加ip,打成包
数据链路层:给数据加上mac打包成帧
物理层:将数据转换二进制,在物质介质传输,称作比特


3次连接
4次断开
为什么4次断开?
为什么连接的时候是三次握手，关闭的时候却是四次握手？
当server端收到client端的syn连接请求报文后,可以直接发送syn+ack报文,其中ack报文时用来应对,syn报文时用来同步.但是关闭连接时.当server端收到fin报文时.很可能并不会立即关闭socket,所以只能先回复一个ack报文,告诉cliet"你发的fin报文我收到了".只有等到server端所有的报文都发送完了,我才能发送fin报文,因此不能一起发送,故需要4次捂手.

VRRP 虚拟路由冗余协议

raid0(条带模式)
同一文档分散存放在不同磁盘,并行写入提高效率 
RAID 0，可以是一块盘和N个盘组合 
其优点读写快，是RAID中最好的
缺点：没有冗余，一块坏了数据就全没有了

raid1(镜像模式)
一个文档复制成多份,分别写入不同磁盘
多分拷贝提高可靠性,效率无法提升
RAID 1，只能2块盘，盘的大小可以不一样，以小的为准
10G+10G只有10G，另一个做备份。它有100%的冗余，缺点：浪费资源，成本高

RAID 5 ，3块盘，容量计算10*（n-1）,损失一块盘
特点，读写性能一般，读还好一点，写不好

正向代理
反向代理

监控网卡流量软件nload iftop

mysql.user是存储用户授权信息，mysql.db是存储库的授权信息，mysql.tables_priv是存储表的 授权信息，mysql.columns_priv是存储字段的授权信息


硬链接inode号相同    (复制)  会增加计数 ln
只能对已存在的文件创建
不能对目录,只能对文件创建
删除一个硬链接文件并不影响其他有相同的inode的文件
不能交叉文件系统进行硬链接创建

软连接有自己的文件属性及权限   (快捷方式)  ln -s
可对不存在的文件或目录创建软连接
软连接可以对文件或目录创建
软连接可以交叉文件系统
创建软连接时,连接计数i_nlink不会增加
删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接

端口转发
firewall-cmd --permanent  --zone=trusted  --add-forward-port=port=5423:proto=tcp:toport=80



/etc/login.defs
pass_min_len 10

free  buff 内核  cache 硬盘

systemctl -a |grep vm
systemctl -w vm.swappiness=60

磁盘IO
top
vmstat
iostat
iotop


大数据分析一般用什么工具分析
Hadoop
HPCC
Storm
Apache Drill


ETL是将业务系统的数据经过抽取、清洗转换之后加载到数据仓库的过程

IAAS 基础设施服务
PAAS 平台服务
SAAS 软件服务

HTML5 将成为 HTML、XHTML 以及 HTML DOM 的新标准。
1、离线缓存
3、地理定位
丰富的交互方式


Elasticsearch:负责日志检索和储存
Logstash:负责日志的收集和分析、处理
Kibana:负责日志的可视化

按需计算收费模式


路由器的工作原理：

路由器工作在OSI七层协议中的第三层，也就是网络层。其主要任务是接收来源于一个网络接口的数据包，根据这个数据包中所含的目地址，决定转发到的下一个目的地址。路由器中时刻维持着一张路由表，所有的数据包的发送和转发都通过查找路由表来实现的。这个路由表可以静态配置，也可以通过动态路由协议产生。
 
 为什么要使用zabbix
 支持多平台企业级分布式开源软件监控
 安装部署简单.多种数据采集插件灵活集成
 可实现复杂多条件告警
 自带画图功能,得到数据可以会城图形
 提供多种API接口,支持调用脚本
1）Zabbix是一个自由开放源代码的产品，在理解源代码的基础之上可以按自己的需求进行二次开发，Zabbix采用GNU  General        Public License（GPL）version 2开源协议。
2）整体架构模块化较清晰，方便后期架构的扩展
3）默认支持数据库存储数据，且兼容通用的Mysql的数据库，持久存储到数据库，便于后期的ai数据分析。
4）所需环境为lnmp或者lamp皆可，比较简单
5）Server和Agent全部采用C语言编码，对系统的资源占用非常小，数据采集的性能和速度非常快。
 
 
 docker解决的问题.
 由于不同的机器有不同的操作系统,以及不同的库和组件,在将一个应用部署到多台机器上需要进行大量的环境配置操作
docker主要解决环境配置问题,他是一种虚拟话技术,对进程进行隔离,被隔离的进程独立于宿主操作系统和其他隔离的进程.使用Docker可以不修改应用程序代码,不需要开发人员学习特定环境下的数据,就能够将现有应用程序部署在其他机器上.
与虚拟机相比较:
虚拟机是一种虚拟化技术,他与Docker最大的区别在于它是通过模拟硬件,并在硬件上安装操作系统来实现. 
 	启动速度
 		启动虚拟机需要先启动虚拟机的操作系统,在启动应用,这个过程非常慢
 		而启动Docker相当于启动宿主操作系统上的一个进程.
 	占用资源
 		虚拟机是一个完整的操作系统,需要占用大量的磁盘,内存,CPU资源,一台机器只能开启几十个的虚拟机
 		而Docker只是一个进程,只需要将应用及相关组件打包,在运行时占用很少的资源,一台机器可以开启成千上万个Docker.	
 
 		
 
 
 
 
 


ctr+a  shift+s 横 
ctr+a  shift+|  竖
ctr+a  shift+f
			tab
			n 同步
			c 新的
			关闭shift+x








