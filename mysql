panglj@tedu.cn

查询登录主机名select @@hostname;
###Day01
>>

		配置文件		/etc/my.cnf
		数据存放路径	/var/lib/mysql 
		默认端口 		3306
		进程名		mysqld
		传输协议  	TCP
		进程所有者 	mysql
		进程所属者 	mysql
		错误日志文件	/var/log/mysqld.log
	扩展:
		/var/lib/mysql/库名/表名
		user.frm  表头信息
		user.ibd  表中数据和索引
>>
>>
>>>首次登录密码在安装软件时随机生产
>>>随机密码存在日志文件/var/log/mysql.log
查看随机密码 grep 'password' /var/log/mysqld.log
>>>
>>>mysql -h 数据库地址 -u用户 -p密码
>>>
>>>#####修改root密码
>>>
		alter user root@"localhost" identified by "密码";		
		mysql -hlocalhost -uroot -p密码
>>>
>>>#####修改密码策略
	0 or LOW 			长度
	1 or MEDIUM(默认) 	长度,数字,小写/大写,和特殊字符
	2 or STRONG  		长度,数字,小写/大写和特殊字符;字典文件
	show variables like "%password%"; //查看变量
	set global validate_password_policy=0;//修改密码策略
	set global validate_password_length=6;//修改密码长度
	##永久配置
	vim /etc/my.cnf
		validate_password_policy=0
		validate_password_length=6
>>>
>>####sql分类
		DDL(定义) create alter frop	
		DML(操作) insert update delete
		DCL(控制) grant  revoke
		DTL(事物) commit rollback savepoint
>>>
		grant select on db3.* to aaa@"192.168.4.50" identified by "1qaz@WSX";
>>>
>>库管理命令
>>>
		show databases;			//显示已有的库
		select user();			//显示连接用户
		select database();		//显示当前所在的库
		use 库名;				//切换库
		show tables;			//显示已有的表	
		create database 库名;	//创建新库
		drop database 库名;		//删除库
>>>
>>表管理命令
>>>
		create table 库名.表名 (
		字段名1 类型,
		字段名2 类型)
		default charset=utf8;
		//指定中文字符集
		##永久配置
		vim /etc/my.cnf
		character_set_server=utf8
		show variables like 'charac%';
>>>
>>>
>>字符类型
>>>
	
		定长char
			最大字符数255
		变长varchar
			按数据实际大小分配存储空间
		varvhar 1--65532
		大文本类型:text/blob
		字符数大于65535存储时使用
>>
>>数值类型
>>>
		#整数型
		类型			名称						有符号范围		无符号范围
		tinyint  		微小整数					-128~127		0~255
		smalint		小整数					-32768~32767  0~65535
		mediumint 	中整型
		int			大整型
		bigint		极大整型
		unsigned 		使用无符号存储范围
		#浮点型
		float     	单精度
		double		双精度

>>>
>>日期类型
>>>
		datetime
		1000-01-01 00:00:00~9999-12-31 23:59:59
		
		timestamp
		1970-01-01 00:00:00~2038-01-19 00:00:00
		日期 date 		yyyymmdd
		年 	year		yyyy
		时间	time		HH:MM:SS
>>>
>>枚举类型
>>>
		enum 单选
		set  多选
>>>
>>>
----------------------------
###Day02
>>>
>>约束条件
>>>
		空null not null 非空
		键值key
		默认值default 
		额外设置        extra
>>>
>>修改表结构
>>>
>>>
		添加新字段	
			alter table 表名 add 字段名 类型 约束条件 [after|firsh]
		修改字段类型
			alter table 表名 modify 字段名 类型 约束条件 [after|firsh]
		修改字段名
			alter table 表名 change 源字段 新字段 类型 约束条件;
			alter table t1 change id stu_id  int ;
			可以修改字段类型
			alter table t1 change school xuexiao varchar(30) default "tedua";
		删除字段
			alter table 表名 drop 字段名
			删除多个字段
			alter table 表名 drop 字段名,drop 字段名.
		修改表名
			alter table 表名 rename 新表名;
>>>
>>INDEX普通索引
>>>
		索引类型包括:Btree B+tree hash
		优点:
			通过创建唯一性索引,可以保证数据库表中每一行数据的唯一性
			可以加快数据的查询速度
		缺点:
			当对表中的数据进行增删改的时候,索引也要动态的调整,降低了数据的维护速度
			索引需要占用物理空间
>>>	
>>>>
			index使用规则
			一个表中可以有多个inxdex字段
			字段的值允许重复,且可以赋null值
			通常把做为查询条件的字段设置为index字段
			index字段标志是MUL
>>>
		#已有表创建索引
		create index 索引名 on 表名(字段名);
		#删除索引
		drop index 索引名 on 表名;
		#查询索引信息
		show index from 表名
				index_type:BTREE 使用二叉树木算法
		#创表时创建索引
		create table t1 (name char(10), index(name));
>>>
>>primary key主键
>>>
>>>
		使用规则
			字段值不允许重复,且不允许赋值NULL值
			一个表中只能有一个primary key字段
			多个字段都可以做为主键,称为复合主键,必须一起创建.
			主键字段的标志是PRI
			主键通常与auto_increment连用
			通常把表中唯一标识记录的字段设置为主键
>>>
		在已有表中添加主键
		alter table 表名 add primary key(字段名);
		创建表时创建主键
		#所有字段定义完，最后指定
		mysql> create table t9 (name char(10), name varchar(8),primary key(name));
		#直接在字段定义时约束
		mysql> create table t8 (name char(10) primary key);
		#复合主键
		mysql> create table payy(name varchar(22),class varchar(22),pay enum("1","2") ,primary key (name,class,pay));
		#删除主键,复合主键----删除后字段仍未非空
		alter table t8 drop primary key; 
		#自增长auto_increment
		mysql> create table a(id int unsigned primary key auto_increment);

		#有自增长需要先删除自增长.
		alter table t3 modify id int not null;
		alter table t3 drop primary key; 
		
>>>
>>foreign key 外键
>>>
>>>
		创建表时要指导引擎engine=innodb
		create table 表名 (  ......
			foreign key(字段名) references 表名(字段名)
			on update cascade
			on delete cascade
			)engine=innodb;
		CREATE TABLE gz(
		gz_id  int,
		gz float(7,2) ,
		foreign KEY(gz_id) references yg(yg_id)  //创建外键
		ON UPDATE cascade ON DELETE cascade //同步更新、同步删除
		)engine=innodb;	
		删除外键
		alter table gz drop foreign key gz_ibfk_1;	
>>>
>>>
>>>
>>>
----------------------------
###Day03
>>搜索路径
>>>
			查看检索目录
				show variables like "secure_file_priv";
				/var/lib/mysql-files/
			修改检索目录	
				mkdir /myload
				chown mysql /myload
				vim /etc/my.cnf
					[mysqld]
					secure_file_priv="/myload"	
				systemctl restart mysqld
>>>
>>数据导入与导出
>>>
			数据导入与导出	
				命令格式  mysql > load data infile  "目录/文件名"
							into table 库名 表名
							fields terminated by "分隔符"
							lines  terminated by "\n";
			数据导入步骤
					1.把系统文件拷贝到检索目录下
					2.创建存储数据库和表
					3.导入数据
					4.查看数据
			create table user ( name varchar(50),passwd char(1),uid int ,gid int,comment varchar(150),homedir varchar(150),shell varchar(50) );
			mysql> load data infile "/myload/passwd" into table db3.user fields terminated by ":" lines terminated by "\n";
			
			
			数据导出
				命令格式
					select id,name,uid from user where id<=10 into outfile  '/myload/user3.txt' ;
					select id,name,uid from user where id<=10 into outfile  '/myload/user3.txt' fields terminated by "###" ;
					select id,name,uid from user where id<=10 into outfile  '/myload/user3.txt' fields terminated by "###" lines terminated by "!!!";
		
>>>
>>>
>>PhpMyAdmin
>>>
>>>
	
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
CREATE TABLE gz (
  gz_id int(11) DEFAULT NULL,
  name char(16) DEFAULT NULL,
  gz float(7,2) DEFAULT NULL,
  KEY gz_id (gz_id),
  CONSTRAINT gz_ibfk_1 FOREIGN KEY (gz_id) REFERENCES yg (yg_id) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB ;


CREATE TABLE yg (
  yg_id int(11) NOT NULL AUTO_INCREMENT,
  name varchar(11) DEFAULT NULL,
  PRIMARY KEY (yg_id)
) ENGINE=InnoDB ;
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
>>>
